import copy

"""
Python 直接赋值、浅拷贝、深拷贝解析
    直接赋值：其实就是对象的引用（别名）。
    浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象，子对象还是指向统一对象（是引用）。
    深拷贝(deepcopy)：copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象，两者是完全独立的。
"""
x = [1, 2, 3, [4, 5]]       # 原始对象

a = x[:]        # 利用分片操作进行拷贝（浅拷贝）
b = x           # 赋值
c = copy.copy(x)        # 浅拷贝
d = copy.deepcopy(x)    # 深拷贝

x.append(6)     # 改动对象 x
x[3].append('copy')     # 改动 x 中的[4,5]列表子对象

# 改变赋值对象
# b.append(7)
# b[3].pop()

# 改变浅拷贝对象
# c.append(8)
# c[3].append(9)

# 改变深拷贝对象
# d.append(10)
# d[3].pop()

print('原始对象：', x)
print('分片的浅拷贝：', a)     # 分片操作的效果等价于浅拷贝，结果和c同样
print('赋值：', b)         # b是x的一个引用。两者指向的对象同样，打印结果必定同样
print('浅拷贝：', c)        # c仅拷贝了x中的父对象。对于x中嵌套的子对象列表并没有拷贝，所以c中的1,2,3是拷贝得到的副本，属于自己的，但嵌套的子对象列表还是x原来的。
print('深拷贝：', d)        # 因为是深拷贝，所以子对象父对象都是拷贝生产的新的副本。全然不所原来x的影响
